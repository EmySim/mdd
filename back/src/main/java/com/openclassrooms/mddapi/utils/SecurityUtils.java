package com.openclassrooms.mddapi.utils;

import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

/**
 * Classe utilitaire pour la gestion de la s√©curit√© et l'authentification.
 *
 * **RESPONSABILIT√â :** Centralise l'extraction des informations
 * d'authentification depuis le SecurityContext Spring Security.
 *
 * USAGE :
 * - Extraction de l'email utilisateur connect√©
 * - V√©rification du statut d'authentification
 * - Utilitaires de s√©curit√© r√©utilisables
 *
 * NOTE : Les exceptions sont g√©r√©es par GlobalExceptionHandler
 */
@Slf4j
public final class SecurityUtils {

    /**
     * Constructeur priv√© pour emp√™cher l'instanciation.
     * Classe utilitaire avec m√©thodes statiques uniquement.
     */
    private SecurityUtils() {
        throw new IllegalStateException("Utility class");
    }

    /**
     * R√©cup√®re l'email de l'utilisateur connect√© depuis le SecurityContext.
     *
     * S√âCURIT√â : Extraction de l'identifiant utilisateur via JWT
     * pour d√©finir automatiquement l'auteur des articles/commentaires.
     *
     * @return email de l'utilisateur connect√©
     * @throws IllegalStateException si aucun utilisateur n'est authentifi√©
     *         (g√©r√© par GlobalExceptionHandler ‚Üí 409 CONFLICT)
     */
    public static String getCurrentUserEmail() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (authentication == null || !authentication.isAuthenticated()) {
            throw new IllegalStateException("Aucun utilisateur authentifi√©");
        }

        String userEmail = authentication.getName();
        log.debug("üîê Utilisateur authentifi√©: {}", userEmail);

        return userEmail;
    }

    /**
     * V√©rifie si un utilisateur est authentifi√©.
     *
     * @return true si un utilisateur est authentifi√©
     */
    public static boolean isAuthenticated() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return authentication != null && authentication.isAuthenticated();
    }

    /**
     * R√©cup√®re l'objet Authentication complet.
     * Utile pour des v√©rifications avanc√©es.
     *
     * @return Authentication ou null si non authentifi√©
     */
    public static Authentication getCurrentAuthentication() {
        return SecurityContextHolder.getContext().getAuthentication();
    }
}
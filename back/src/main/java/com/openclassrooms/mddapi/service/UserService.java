package com.openclassrooms.mddapi.service;

import com.openclassrooms.mddapi.dto.SubjectDTO;
import com.openclassrooms.mddapi.dto.UserDTO;
import com.openclassrooms.mddapi.dto.request.RegisterRequest;
import com.openclassrooms.mddapi.entity.User;
import com.openclassrooms.mddapi.mapper.SubjectMapper;
import com.openclassrooms.mddapi.mapper.UserMapper;
import com.openclassrooms.mddapi.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Service m√©tier User - Gestion compl√®te des utilisateurs avec abonnements.
 * 
 * Fonctionnalit√©s :
 * - Cr√©ation d'utilisateur (inscription)
 * - Consultation de profil (avec/sans abonnements)
 * - Mise √† jour du profil
 * - Gestion des abonnements aux sujets
 * 
 * Architecture : Service ‚Üí Repository + Mapper
 * Respect SOLID et MVC
 * 
 * @author √âquipe MDD
 * @version 1.0
 */
@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class UserService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final UserMapper userMapper;
    private final SubjectMapper subjectMapper;

    /**
     * ‚úÖ Cr√©e un nouvel utilisateur (inscription).
     * 
     * R√àGLES M√âTIER :
     * - Email et username uniques (contr√¥l√©s par la DB)
     * - Mot de passe hash√© automatiquement
     * - Dates de cr√©ation auto-g√©n√©r√©es
     * - Aucun abonnement initial
     * 
     * @param registerRequest donn√©es d'inscription
     * @return UserDTO de l'utilisateur cr√©√©
     * @throws DataIntegrityViolationException si email/username d√©j√† utilis√©
     */
    public UserDTO createUser(RegisterRequest registerRequest) {
        log.info("üîê Cr√©ation utilisateur: {}", registerRequest.getEmail());

        // Conversion DTO ‚Üí Entity via Mapper
        User user = userMapper.toUser(registerRequest);

        // Hash du mot de passe pour s√©curit√©
        user.setPassword(passwordEncoder.encode(registerRequest.getPassword()));

        // Sauvegarde DB-FIRST
        User savedUser = userRepository.save(user);

        log.info("‚úÖ Utilisateur cr√©√©: {} (ID: {})", savedUser.getEmail(), savedUser.getId());

        // Conversion Entity ‚Üí DTO via Mapper
        return userMapper.toDto(savedUser);
    }

    /**
     * ‚úÖ R√©cup√®re le profil complet de l'utilisateur avec ses abonnements d√©taill√©s.
     * 
     * FONCTIONNALIT√â AVANC√âE :
     * - Profil utilisateur complet
     * - Liste des sujets abonn√©s avec d√©tails
     * - Statut d'abonnement forc√© √† true
     * - Optimis√© avec Lazy Loading
     * 
     * @param email email de l'utilisateur connect√©
     * @return UserDTO avec abonnements complets
     * @throws EntityNotFoundException si utilisateur inexistant
     */
     @Transactional(readOnly = true)
    public UserDTO getUserProfileWithSubscriptions(String email) {
        log.debug("üìñ Consultation profil avec abonnements: {}", email);

        User user = findUserByEmail(email);
        
        // ‚úÖ Utilisation de la gestion manuelle (plus simple)
        UserDTO userDTO = userMapper.toDto(user);

        // Gestion manuelle des abonnements avec statut
        if (user.getSubscribedSubjects() != null && !user.getSubscribedSubjects().isEmpty()) {
            List<SubjectDTO> subscribedSubjects = user.getSubscribedSubjects()
                    .stream()
                    .map(subject -> {
                        SubjectDTO dto = subjectMapper.toDTO(subject);
                        dto.setIsSubscribed(true);
                        return dto;
                    })
                    .collect(Collectors.toList());
            
            userDTO.setSubscribedSubjects(subscribedSubjects);
            log.debug("üìå {} abonnements trouv√©s", subscribedSubjects.size());
        } else {
            userDTO.setSubscribedSubjects(new ArrayList<>());
            log.debug("üìå Aucun abonnement trouv√©");
        }

        return userDTO;
    }

    /**
     * ‚úÖ Met √† jour le profil utilisateur.
     * 
     * R√àGLES M√âTIER :
     * - Mise √† jour partielle (champs non null uniquement)
     * - Email normalis√© (lowercase, trim)
     * - Username nettoy√© (trim)
     * - Mot de passe re-hash√© si fourni
     * - Date de mise √† jour auto-g√©n√©r√©e
     * 
     * @param currentEmail email actuel de l'utilisateur
     * @param userUpdate   donn√©es de mise √† jour
     * @return UserDTO mis √† jour
     * @throws EntityNotFoundException si utilisateur inexistant
     */
    public UserDTO updateUserProfile(String currentEmail, UserDTO userUpdate) {
        log.info("üîÑ Mise √† jour profil: {}", currentEmail);

        User user = findUserByEmail(currentEmail);

        // ‚úÖ MISE √Ä JOUR CONDITIONNELLE

        // Username : nettoyage et validation
        if (userUpdate.getUsername() != null && !userUpdate.getUsername().trim().isEmpty()) {
            String cleanUsername = userUpdate.getUsername().trim();
            user.setUsername(cleanUsername);
            log.debug("üìù Username mis √† jour: {}", cleanUsername);
        }

        // Email : normalisation et validation
        if (userUpdate.getEmail() != null && !userUpdate.getEmail().trim().isEmpty()) {
            String cleanEmail = userUpdate.getEmail().trim().toLowerCase();
            user.setEmail(cleanEmail);
            log.debug("üìß Email mis √† jour: {}", cleanEmail);
        }

        // Mot de passe : hash si fourni
        if (userUpdate.getPassword() != null && !userUpdate.getPassword().trim().isEmpty()) {
            String hashedPassword = passwordEncoder.encode(userUpdate.getPassword());
            user.setPassword(hashedPassword);
            log.debug("üîê Mot de passe mis √† jour");
        }

        // Sauvegarde avec mise √† jour auto de updatedAt
        User updatedUser = userRepository.save(user);

        log.info("‚úÖ Profil mis √† jour: {}", updatedUser.getEmail());

        return userMapper.toDto(updatedUser);
    }

    /**
     * ‚úÖ Compte le nombre total d'utilisateurs.
     * 
     * Utilis√© pour :
     * - Statistiques admin
     * - Monitoring
     * 
     * @return nombre total d'utilisateurs
     */
    @Transactional(readOnly = true)
    public long countAllUsers() {
        long count = userRepository.count();
        log.debug("üìä Nombre total d'utilisateurs: {}", count);
        return count;
    }

    /**
     * ‚úÖ R√©cup√®re un utilisateur par email (m√©thode interne).
     * 
     * S√âCURIT√â :
     * - M√©thode priv√©e pour √©viter exposition
     * - Exception explicite si non trouv√©
     * - Log pour tra√ßabilit√©
     * 
     * @param email email de recherche
     * @return User trouv√©
     * @throws EntityNotFoundException si utilisateur inexistant
     */
    private User findUserByEmail(String email) {
        log.debug("üîç Recherche utilisateur: {}", email);

        return userRepository.findByEmail(email)
                .orElseThrow(() -> {
                    log.warn("‚ùå Utilisateur non trouv√©: {}", email);
                    return new EntityNotFoundException("Utilisateur non trouv√©: " + email);
                });
    }
}
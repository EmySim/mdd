package com.openclassrooms.mddapi.service;

import com.openclassrooms.mddapi.dto.CommentDTO;
import com.openclassrooms.mddapi.entity.Article;
import com.openclassrooms.mddapi.entity.Comment;
import com.openclassrooms.mddapi.entity.User;
import com.openclassrooms.mddapi.mapper.CommentMapper;
import com.openclassrooms.mddapi.repository.ArticleRepository;
import com.openclassrooms.mddapi.repository.CommentRepository;
import com.openclassrooms.mddapi.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityNotFoundException;

/**
 * Service m√©tier Comment - Gestion selon sp√©cifications MVP MDD strictes.
 *
 * **RESPONSABILIT√âS** (uniquement ce qui est demand√© MVP) :
 * - Cr√©ation de commentaires avec validation m√©tier
 * - Lecture de commentaires par article avec tri chronologique
 * - Suppression de ses propres commentaires
 *
 * R√àGLES M√âTIER IMPL√âMENT√âES :
 * - Auteur d√©fini automatiquement (utilisateur connect√©)
 * - Date d√©finie automatiquement
 * - Contenu obligatoire
 * - Appartient obligatoirement √† UN article
 * - Pas de sous-commentaires (pas de r√©cursivit√©)
 * - Visible dans la consultation d√©taill√©e de l'article
 * - Affichage par ordre chronologique (plus ancien en premier pour suivre la conversation)
 *
 * **PAS D'OVER-ENGINEERING** : Uniquement les fonctionnalit√©s MVP demand√©es.
 *
 * @author √âquipe MDD
 * @version 1.0
 */
@Service
@RequiredArgsConstructor
@Slf4j
@Transactional(readOnly = true)
public class CommentService {

    private final CommentRepository commentRepository;
    private final ArticleRepository articleRepository;
    private final UserRepository userRepository;
    private final CommentMapper commentMapper;

    // ============================================================================
    // CR√âATION DE COMMENTAIRES
    // ============================================================================

    /**
     * Cr√©e un nouveau commentaire sur un article.
     *
     * R√àGLES M√âTIER MVP :
     * - Auteur extrait du contexte de s√©curit√© (utilisateur connect√©)
     * - Article obligatoire et doit exister
     * - Contenu obligatoire (validation DTO)
     * - Date auto-g√©n√©r√©e par Hibernate
     * - Pas de sous-commentaires
     *
     * @param articleId    ID de l'article √† commenter
     * @param commentDTO   donn√©es du commentaire √† cr√©er
     * @param authorEmail  email de l'auteur (utilisateur connect√©)
     * @return CommentDTO du commentaire cr√©√©
     * @throws EntityNotFoundException si l'auteur ou l'article n'existe pas
     */
    @Transactional
    public CommentDTO createComment(Long articleId, CommentDTO commentDTO, String authorEmail) {
        log.info("üí¨ Cr√©ation commentaire sur article ID: {} par {}", articleId, authorEmail);

        // Validation et r√©cup√©ration de l'auteur
        User author = userRepository.findByEmail(authorEmail)
                .orElseThrow(() -> new EntityNotFoundException("Utilisateur non trouv√©: " + authorEmail));

        // Validation et r√©cup√©ration de l'article
        Article article = articleRepository.findById(articleId)
                .orElseThrow(() -> new EntityNotFoundException("Article non trouv√© avec ID: " + articleId));

        // Conversion DTO ‚Üí Entity
        Comment comment = commentMapper.toEntity(commentDTO);

        // D√©finition des relations (pas g√©r√©es par le mapper)
        comment.setAuthor(author);
        comment.setArticle(article);

        // Sauvegarde (ID auto-g√©n√©r√©, date auto-cr√©√©e)
        Comment savedComment = commentRepository.save(comment);

        log.info("‚úÖ Commentaire cr√©√© (ID: {}) sur article '{}' par {}",
                savedComment.getId(), article.getTitle(), authorEmail);

        // Conversion Entity ‚Üí DTO avec m√©tadonn√©es compl√®tes
        return commentMapper.toDTO(savedComment);
    }

    // ============================================================================
    // LECTURE DE COMMENTAIRES
    // ============================================================================

    /**
     * R√©cup√®re tous les commentaires d'un article avec pagination.
     *
     * R√àGLE M√âTIER MVP : Affichage par ordre chronologique
     * (plus ancien en premier pour faciliter la lecture des √©changes).
     *
     * @param articleId ID de l'article
     * @param page      num√©ro de page (0-based)
     * @param size      taille de page
     * @return Page de CommentDTO de l'article
     * @throws EntityNotFoundException si l'article n'existe pas
     */
    public Page<CommentDTO> getCommentsByArticle(Long articleId, int page, int size) {
        log.debug("üí¨ Liste commentaires article ID: {} - Page: {}, Size: {}", articleId, page, size);

        // V√©rification que l'article existe
        if (!articleRepository.existsById(articleId)) {
            throw new EntityNotFoundException("Article non trouv√© avec ID: " + articleId);
        }

        Pageable pageable = PageRequest.of(page, size);
        Page<Comment> commentsPage = commentRepository.findByArticleIdOrderByCreatedAtAsc(articleId, pageable);

        log.debug("üí¨ {} commentaires trouv√©s pour l'article ID: {}",
                commentsPage.getNumberOfElements(), articleId);

        // Conversion Page<Entity> ‚Üí Page<DTO>
        return commentsPage.map(commentMapper::toDTO);
    }

    /**
     * R√©cup√®re un commentaire par son ID.
     *
     * @param id ID du commentaire
     * @return CommentDTO complet
     * @throws EntityNotFoundException si le commentaire n'existe pas
     */
    public CommentDTO getCommentById(Long id) {
        log.debug("üîç Recherche commentaire ID: {}", id);

        Comment comment = commentRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Commentaire non trouv√© avec ID: " + id));

        return commentMapper.toDTO(comment);
    }

    /**
     * Compte le nombre de commentaires d'un article.
     * Utile pour afficher le nombre total dans l'interface.
     *
     * @param articleId ID de l'article
     * @return nombre de commentaires
     */
    public long countCommentsByArticle(Long articleId) {
        log.debug("üìä Comptage commentaires article ID: {}", articleId);
        return commentRepository.countByArticleId(articleId);
    }

    // ============================================================================
    // SUPPRESSION DE COMMENTAIRES
    // ============================================================================

    /**
     * Supprime un commentaire.
     * R√àGLE M√âTIER : Seul l'auteur peut supprimer son commentaire.
     *
     * @param commentId   ID du commentaire √† supprimer
     * @param userEmail   email de l'utilisateur connect√©
     * @throws EntityNotFoundException si le commentaire n'existe pas
     * @throws IllegalStateException   si l'utilisateur n'est pas l'auteur
     */
    @Transactional
    public void deleteComment(Long commentId, String userEmail) {
        log.info("üóëÔ∏è Suppression commentaire ID: {} par {}", commentId, userEmail);

        // R√©cup√©ration du commentaire
        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new EntityNotFoundException("Commentaire non trouv√© avec ID: " + commentId));

        // V√©rification que l'utilisateur connect√© est l'auteur
        if (!comment.getAuthor().getEmail().equals(userEmail)) {
            throw new IllegalStateException("Vous ne pouvez supprimer que vos propres commentaires");
        }

        // Suppression
        commentRepository.delete(comment);

        log.info("‚úÖ Commentaire supprim√© (ID: {}) par {}", commentId, userEmail);
    }

    // ============================================================================
    // M√âTHODES UTILITAIRES
    // ============================================================================

    /**
     * R√©cup√®re les commentaires d'un utilisateur.
     * Utile pour profil utilisateur ou mod√©ration.
     *
     * @param userEmail email de l'utilisateur
     * @param page      num√©ro de page
     * @param size      taille de page
     * @return Page de CommentDTO de l'utilisateur
     */
    public Page<CommentDTO> getCommentsByUser(String userEmail, int page, int size) {
        log.debug("üë§ Commentaires utilisateur: {} - Page: {}, Size: {}", userEmail, page, size);

        User user = userRepository.findByEmail(userEmail)
                .orElseThrow(() -> new EntityNotFoundException("Utilisateur non trouv√©: " + userEmail));

        Pageable pageable = PageRequest.of(page, size);
        Page<Comment> commentsPage = commentRepository.findByAuthorIdOrderByCreatedAtDesc(user.getId(), pageable);

        return commentsPage.map(commentMapper::toDTO);
    }

    /**
     * V√©rifie si un utilisateur a d√©j√† comment√© un article.
     *
     * @param articleId ID de l'article
     * @param userEmail email de l'utilisateur
     * @return true si l'utilisateur a d√©j√† comment√©
     */
    public boolean hasUserCommentedArticle(Long articleId, String userEmail) {
        User user = userRepository.findByEmail(userEmail)
                .orElseThrow(() -> new EntityNotFoundException("Utilisateur non trouv√©: " + userEmail));

        return commentRepository.existsByArticleIdAndAuthorId(articleId, user.getId());
    }
}
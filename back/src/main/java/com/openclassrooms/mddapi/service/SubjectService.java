package com.openclassrooms.mddapi.service;

import com.openclassrooms.mddapi.dto.SubjectDTO;
import com.openclassrooms.mddapi.entity.Subject;
import com.openclassrooms.mddapi.entity.User;
import com.openclassrooms.mddapi.mapper.SubjectMapper;
import com.openclassrooms.mddapi.repository.SubjectRepository;
import com.openclassrooms.mddapi.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityNotFoundException;

/**
 * Service m√©tier Subject - Clean Architecture.
 *
 * ‚úÖ BONNES PRATIQUES APPLIQU√âES :
 * - Gestion des entit√©s en interne uniquement
 * - DTOs pour toutes les interfaces publiques
 * - Transactions optimis√©es et explicites
 * - Logique m√©tier encapsul√©e
 * - Pas de fuite d'entit√©s vers les contr√¥leurs
 *
 * @author √âquipe MDD
 * @version 2.0 - Clean Architecture
 */
@Service
@RequiredArgsConstructor
@Slf4j
@Transactional(readOnly = true)
public class SubjectService {

    private final SubjectRepository subjectRepository;
    private final UserRepository userRepository;
    private final SubjectMapper subjectMapper;

    /**
     * R√©cup√®re tous les sujets avec statut d'abonnement pour l'utilisateur connect√©.
     *
     * ‚úÖ BONNE PRATIQUE :
     * - Transaction read-only pour performance
     * - Conversion Entity ‚Üí DTO au niveau service
     * - Statut d'abonnement calcul√© c√¥t√© service
     */
    public Page<SubjectDTO> getAllSubjects(String userEmail, int page, int size) {
        log.debug("üìÑ Liste sujets pour: {} - Page: {}, Size: {}", userEmail, page, size);

        // R√©cup√©ration utilisateur connect√©
        User user = findUserByEmail(userEmail);

        Pageable pageable = PageRequest.of(page, size);
        Page<Subject> subjectsPage = subjectRepository.findAllByOrderByNameAsc(pageable);

        // ‚úÖ Conversion avec statut d'abonnement calcul√©
        return subjectsPage.map(subject -> {
            SubjectDTO dto = subjectMapper.toDTO(subject);
            dto.setIsSubscribed(user.isSubscribedTo(subject));
            return dto;
        });
    }

    /**
     * R√©cup√®re un sujet par son ID avec statut d'abonnement.
     */
    public SubjectDTO getSubjectById(Long id, String userEmail) {
        log.debug("üîç Recherche sujet ID: {} pour: {}", id, userEmail);

        Subject subject = findSubjectById(id);
        User user = findUserByEmail(userEmail);

        SubjectDTO dto = subjectMapper.toDTO(subject);
        dto.setIsSubscribed(user.isSubscribedTo(subject));

        return dto;
    }

    /**
     * Abonne un utilisateur √† un sujet.
     *
     * ‚úÖ BONNES PRATIQUES :
     * - Transaction compl√®te pour coh√©rence
     * - Logique m√©tier dans les entit√©s
     * - V√©rifications business avant action
     * - Gestion des √©tats m√©tier propres
     */
    @Transactional
    public void subscribeToSubject(Long subjectId, String userEmail) {
        log.info("üìå Abonnement sujet ID: {} par: {}", subjectId, userEmail);

        User user = findUserByEmail(userEmail);
        Subject subject = findSubjectById(subjectId);

        // ‚úÖ Logique m√©tier dans l'entit√©
        if (user.isSubscribedTo(subject)) {
            throw new IllegalStateException("Vous √™tes d√©j√† abonn√© √† ce sujet");
        }

        // ‚úÖ Utilisation des m√©thodes m√©tier des entit√©s
        boolean added = user.subscribe(subject);

        if (added) {
            // Sauvegarde optimis√©e - seul l'utilisateur change
            userRepository.save(user);
            log.info("‚úÖ Abonn√© √† '{}' par {}", subject.getName(), userEmail);
        } else {
            // Cas edge improbable mais g√©r√©
            log.warn("‚ö†Ô∏è √âchec abonnement inexpliqu√© pour {} √† {}", userEmail, subject.getName());
            throw new IllegalStateException("√âchec de l'abonnement");
        }
    }

    /**
     * D√©sabonne un utilisateur d'un sujet.
     *
     * ‚úÖ M√™me logique propre que subscribe
     */
    @Transactional
    public void unsubscribeFromSubject(Long subjectId, String userEmail) {
        log.info("üìå D√©sabonnement sujet ID: {} par: {}", subjectId, userEmail);

        User user = findUserByEmail(userEmail);
        Subject subject = findSubjectById(subjectId);

        // ‚úÖ Logique m√©tier dans l'entit√©
        if (!user.isSubscribedTo(subject)) {
            throw new IllegalStateException("Vous n'√™tes pas abonn√© √† ce sujet");
        }

        // ‚úÖ Utilisation des m√©thodes m√©tier des entit√©s
        boolean removed = user.unsubscribe(subject);

        if (removed) {
            // Sauvegarde optimis√©e
            userRepository.save(user);
            log.info("‚úÖ D√©sabonn√© de '{}' par {}", subject.getName(), userEmail);
        } else {
            // Cas edge improbable mais g√©r√©
            log.warn("‚ö†Ô∏è √âchec d√©sabonnement inexpliqu√© pour {} de {}", userEmail, subject.getName());
            throw new IllegalStateException("√âchec du d√©sabonnement");
        }
    }

    // ============================================================================
    // M√âTHODES PRIV√âES - GESTION ENTIT√âS INTERNE
    // ============================================================================

    /**
     * ‚úÖ R√©cup√©ration utilisateur encapsul√©e.
     *
     * AVANTAGES :
     * - Exception uniforme
     * - Log centralis√©
     * - R√©utilisable
     * - √âvite duplication code
     */
    private User findUserByEmail(String email) {
        return userRepository.findByEmail(email)
                .orElseThrow(() -> new EntityNotFoundException("Utilisateur non trouv√©: " + email));
    }

    /**
     * ‚úÖ R√©cup√©ration sujet encapsul√©e.
     */
    private Subject findSubjectById(Long id) {
        return subjectRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Sujet non trouv√© avec ID: " + id));
    }

    // ============================================================================
    // M√âTHODES PUBLIQUES ADDITIONNELLES
    // ============================================================================

    /**
     * V√©rifie l'existence d'un nom de sujet.
     */
    public boolean existsByName(String name) {
        log.debug("üîç V√©rification existence nom sujet: {}", name);
        return subjectRepository.existsByNameIgnoreCase(name);
    }

    /**
     * Cr√©e un nouveau sujet.
     */
    @Transactional
    public SubjectDTO createSubject(SubjectDTO subjectDTO) {
        log.info("üìù Cr√©ation sujet: {}", subjectDTO.getName());

        if (existsByName(subjectDTO.getName())) {
            throw new IllegalStateException("Un sujet avec ce nom existe d√©j√†");
        }

        Subject subject = subjectMapper.toEntity(subjectDTO);
        Subject savedSubject = subjectRepository.save(subject);

        log.info("‚úÖ Sujet cr√©√©: '{}' (ID: {})", savedSubject.getName(), savedSubject.getId());
        return subjectMapper.toDTO(savedSubject);
    }
}
package com.openclassrooms.mddapi.exception;

import com.openclassrooms.mddapi.dto.response.MessageResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import javax.persistence.EntityNotFoundException;
import java.util.HashMap;
import java.util.Map;

/**
 * Gestionnaire global des exceptions pour l'API MDD.
 * 
 * Intercepte toutes les exceptions et retourne des r√©ponses HTTP coh√©rentes.
 * Utilise les exceptions Java standard : EntityNotFoundException, IllegalStateException, etc.
 * Codes g√©r√©s : 400 (validation), 403 (permissions), 404 (not found), 409 (conflit), 500 (erreur syst√®me).
 * Note: Les erreurs 401 sont g√©r√©es par JwtAuthenticationEntryPoint dans SecurityConfig.
 * 
 * @author √âquipe MDD
 * @version 2.0
 */
@ControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

    // ============================================================================
    // 400 BAD_REQUEST - Validation
    // ============================================================================

    /**
     * G√®re les erreurs de validation des DTOs (@Valid).
     * Intercepte les erreurs Bean Validation et retourne le d√©tail par champ.
     *
     * @param ex l'exception de validation
     * @param request la requ√™te HTTP
     * @return ResponseEntity avec erreurs par champ et statut 400
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, Object>> handleValidationExceptions(
            MethodArgumentNotValidException ex, WebRequest request) {

        log.warn("üî¥ [400] Validation √©chou√©e: {}", request.getDescription(false));

        // Extraction des erreurs par champ
        Map<String, String> fieldErrors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage() != null
                    ? error.getDefaultMessage()
                    : "Erreur de validation";
            fieldErrors.put(fieldName, errorMessage);
        });

        // Construction de la r√©ponse avec d√©tail des erreurs
        Map<String, Object> response = new HashMap<>();
        response.put("message", "Validation failed");
        response.put("type", "error");
        response.put("errors", fieldErrors);

        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST); // 400
    }

    /**
     * G√®re les arguments invalides ou param√®tres incorrects.
     *
     * @param ex l'exception contenant le message d'erreur
     * @param request la requ√™te HTTP
     * @return ResponseEntity avec message d'erreur et statut 400
     */
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<MessageResponse> handleIllegalArgumentException(
            IllegalArgumentException ex, WebRequest request) {

        String exceptionMessage = ex.getMessage() != null ? ex.getMessage() : "Argument invalide";
        log.warn("üìù [400] Argument invalide: {}", exceptionMessage);

        MessageResponse response = MessageResponse.error("Param√®tre invalide: " + exceptionMessage);
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST); // 400
    }

    // ============================================================================
    // 401 UNAUTHORIZED - Gestion d√©l√©gu√©e √† JwtAuthenticationEntryPoint
    // ============================================================================
    
    // Note: Les erreurs 401 sont g√©r√©es par JwtAuthenticationEntryPoint
    // configur√© dans SecurityConfig pour une gestion coh√©rente JWT

    // ============================================================================
    // 403 FORBIDDEN - Permissions
    // ============================================================================

    /**
     * G√®re les refus d'acc√®s pour permissions insuffisantes.
     * Ex: modifier l'article d'un autre utilisateur.
     *
     * @param ex l'exception d'acc√®s refus√©
     * @param request la requ√™te HTTP
     * @return ResponseEntity avec message d'erreur et statut 403
     */
    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<MessageResponse> handleAccessDeniedException(
            AccessDeniedException ex, WebRequest request) {

        String exceptionMessage = ex.getMessage() != null ? ex.getMessage() : "Access denied";
        log.warn("üö´ [403] Acc√®s refus√©: {}", exceptionMessage);

        MessageResponse response = MessageResponse.error("Vous n'avez pas les permissions pour cette action");
        return new ResponseEntity<>(response, HttpStatus.FORBIDDEN); // 403
    }

    // ============================================================================
    // 404 NOT_FOUND - Ressource non trouv√©e
    // ============================================================================

    /**
     * G√®re les erreurs de ressources non trouv√©es.
     * Usage: User user = userRepository.findById(id).orElseThrow(() -> new EntityNotFoundException("Utilisateur non trouv√©"));
     *
     * @param ex l'exception contenant le message d'erreur
     * @param request la requ√™te HTTP
     * @return ResponseEntity avec message d'erreur et statut 404
     */
    @ExceptionHandler(EntityNotFoundException.class)
    public ResponseEntity<MessageResponse> handleEntityNotFoundException(
            EntityNotFoundException ex, WebRequest request) {

        String exceptionMessage = ex.getMessage() != null ? ex.getMessage() : "Ressource non trouv√©e";
        log.info("üîç [404] Ressource non trouv√©e: {}", exceptionMessage);

        MessageResponse response = MessageResponse.error(exceptionMessage);
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND); // 404
    }

    // ============================================================================
    // 409 CONFLICT - Conflits
    // ============================================================================

    /**
     * G√®re les violations de contraintes de base de donn√©es.
     * Analyse le message d'erreur DB pour retourner un message utilisateur compr√©hensible.
     *
     * @param ex l'exception de violation de contrainte
     * @param request la requ√™te HTTP
     * @return ResponseEntity avec message adapt√© et statut 409
     */
    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<MessageResponse> handleDataIntegrityViolation(
            DataIntegrityViolationException ex, WebRequest request) {

        String errorMsg = ex.getMessage();
        if (errorMsg == null) {
            errorMsg = "Contrainte de base de donn√©es viol√©e";
        }
        errorMsg = errorMsg.toLowerCase();

        log.warn("üî¥ [409] Contrainte DB viol√©e: {}", errorMsg);

        // Analyse du message d'erreur pour d√©terminer la cause
        String userMessage;
        if (errorMsg.contains("uk_users_email") || errorMsg.contains("email")) {
            userMessage = "Cet email est d√©j√† utilis√©";
        } else if (errorMsg.contains("uk_users_username") || errorMsg.contains("username")) {
            userMessage = "Ce nom d'utilisateur est d√©j√† pris";
        } else if (errorMsg.contains("duplicate") || errorMsg.contains("unique")) {
            userMessage = "Cette donn√©e existe d√©j√† dans le syst√®me";
        } else {
            userMessage = "Erreur de validation des donn√©es";
        }

        MessageResponse response = MessageResponse.error(userMessage);
        return new ResponseEntity<>(response, HttpStatus.CONFLICT); // 409
    }

    /**
     * G√®re les conflits m√©tier de l'application.
     * Ex: se d√©sabonner d'un sujet non suivi, s'abonner √† un sujet d√©j√† suivi.
     *
     * @param ex l'exception de conflit m√©tier
     * @param request la requ√™te HTTP
     * @return ResponseEntity avec message m√©tier et statut 409
     */
    @ExceptionHandler(IllegalStateException.class)
    public ResponseEntity<MessageResponse> handleIllegalStateException(
            IllegalStateException ex, WebRequest request) {

        String exceptionMessage = ex.getMessage() != null ? ex.getMessage() : "√âtat invalide";
        log.warn("‚ö†Ô∏è [409] Conflit business: {}", exceptionMessage);

        MessageResponse response = MessageResponse.error(exceptionMessage);
        return new ResponseEntity<>(response, HttpStatus.CONFLICT); // 409
    }

    // ============================================================================
    // 500 INTERNAL_SERVER_ERROR - Erreurs syst√®me
    // ============================================================================

    /**
     * Gestionnaire de fallback pour toutes les erreurs non g√©r√©es.
     * Retourne un message g√©n√©rique et logge les d√©tails pour investigation.
     *
     * @param ex l'exception non g√©r√©e
     * @param request la requ√™te HTTP
     * @return ResponseEntity avec message g√©n√©rique et statut 500
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<MessageResponse> handleGlobalException(
            Exception ex, WebRequest request) {

        String exceptionMessage = ex.getMessage() != null ? ex.getMessage() : "Erreur inconnue";
        log.error("üí• [500] Erreur syst√®me: {}", exceptionMessage, ex);

        // Message g√©n√©rique pour √©viter l'exposition d'informations sensibles
        MessageResponse response = MessageResponse.error(
                "Une erreur technique est survenue. Veuillez r√©essayer."
        );
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR); // 500
    }
}
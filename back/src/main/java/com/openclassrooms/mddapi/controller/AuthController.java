package com.openclassrooms.mddapi.controller;

import com.openclassrooms.mddapi.dto.request.LoginRequest;
import com.openclassrooms.mddapi.dto.request.RegisterRequest;
import com.openclassrooms.mddapi.dto.response.JwtResponse;
import com.openclassrooms.mddapi.dto.response.MessageResponse;
import com.openclassrooms.mddapi.entity.User;
import com.openclassrooms.mddapi.repository.UserRepository;
import com.openclassrooms.mddapi.security.JwtUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

/**
 * Contr√¥leur REST pour l'authentification des utilisateurs MDD.
 *
 * G√®re l'inscription et la connexion avec g√©n√©ration de tokens JWT
 * selon les sp√©cifications fonctionnelles du MVP.
 *
 * Endpoints publics :
 * - POST /api/auth/register : Inscription nouvel utilisateur
 * - POST /api/auth/login : Connexion avec JWT
 *
 * @author √âquipe MDD
 * @version 1.0
 * @since 1.0
 */
@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@Slf4j
public class AuthController {

    private final AuthenticationManager authenticationManager;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtUtils jwtUtils;

    /**
     * Inscription d'un nouvel utilisateur.
     *
     * V√©rifie l'unicit√© de l'email et du username puis cr√©e le compte
     * avec mot de passe encod√©. Conforme aux sp√©cifications MVP.
     *
     * @param registerRequest donn√©es d'inscription valid√©es
     * @return message de succ√®s ou d'erreur
     */
    @PostMapping("/register")
    public ResponseEntity<?> register(@Valid @RequestBody RegisterRequest registerRequest) {
        log.info("üîê Tentative d'inscription pour email: {}, username: {}",
                registerRequest.getEmail(), registerRequest.getUsername());

        // V√©rification unicit√© email
        if (userRepository.existsByEmail(registerRequest.getEmail())) {
            log.warn("‚ùå Email d√©j√† existant: {}", registerRequest.getEmail());
            return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Cet email est d√©j√† utilis√©"));
        }

        // V√©rification unicit√© username
        if (userRepository.existsByUsername(registerRequest.getUsername())) {
            log.warn("‚ùå Username d√©j√† existant: {}", registerRequest.getUsername());
            return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Ce nom d'utilisateur est d√©j√† pris"));
        }

        try {
            // Cr√©ation du nouvel utilisateur
            User user = User.builder()
                    .email(registerRequest.getEmail())
                    .username(registerRequest.getUsername())
                    .password(passwordEncoder.encode(registerRequest.getPassword()))
                    .build();

            User savedUser = userRepository.save(user);

            log.info("‚úÖ Utilisateur cr√©√© avec succ√®s - ID: {}, Email: {}, Username: {}",
                    savedUser.getId(), savedUser.getEmail(), savedUser.getUsername());

            return ResponseEntity.ok(MessageResponse.success("Inscription r√©ussie"));

        } catch (Exception e) {
            log.error("üí• Erreur lors de l'inscription: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(MessageResponse.error("Erreur lors de l'inscription"));
        }
    }

    /**
     * Connexion utilisateur avec g√©n√©ration de token JWT.
     *
     * Authentifie l'utilisateur et retourne un JWT pour les requ√™tes
     * suivantes. La session persiste via le token c√¥t√© client.
     *
     * @param loginRequest email et mot de passe
     * @return token JWT + informations utilisateur ou erreur
     */
    @PostMapping("/login")
    public ResponseEntity<?> login(@Valid @RequestBody LoginRequest loginRequest) {
        log.info("üîë Tentative de connexion pour email: {}", loginRequest.getEmail());

        try {
            // Authentification Spring Security
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(
                            loginRequest.getEmail(),
                            loginRequest.getPassword()
                    )
            );

            // G√©n√©ration du token JWT
            String jwt = jwtUtils.generateTokenFromUsername(loginRequest.getEmail());

            // R√©cup√©ration des infos utilisateur
            User user = userRepository.findByEmail(loginRequest.getEmail())
                    .orElseThrow(() -> new RuntimeException("Utilisateur non trouv√© apr√®s authentification"));

            log.info("‚úÖ Connexion r√©ussie - ID: {}, Email: {}, Username: {}",
                    user.getId(), user.getEmail(), user.getUsername());

            // R√©ponse avec token et infos utilisateur
            return ResponseEntity.ok(JwtResponse.builder()
                    .token(jwt)
                    .type("Bearer")
                    .id(user.getId())
                    .email(user.getEmail())
                    .username(user.getUsername())
                    .expiresIn(jwtUtils.getJwtExpirationSeconds())
                    .build());

        } catch (AuthenticationException e) {
            log.warn("‚ùå √âchec authentification pour email: {} - Raison: {}",
                    loginRequest.getEmail(), e.getMessage());

            return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Email ou mot de passe incorrect"));

        } catch (Exception e) {
            log.error("üí• Erreur lors de la connexion: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(MessageResponse.error("Erreur lors de la connexion"));
        }
    }

    /**
     * Test de sant√© du service d'authentification.
     * Endpoint simple pour v√©rifier que l'API fonctionne.
     *
     * @return statut du service
     */
    @GetMapping("/status")
    public ResponseEntity<?> getStatus() {
        log.debug("üìä V√©rification du statut du service d'authentification");
        return ResponseEntity.ok(MessageResponse.info("Service d'authentification MDD op√©rationnel"));
    }
}
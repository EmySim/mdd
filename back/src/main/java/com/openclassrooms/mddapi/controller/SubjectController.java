package com.openclassrooms.mddapi.controller;

import com.openclassrooms.mddapi.dto.SubjectDTO;
import com.openclassrooms.mddapi.dto.response.MessageResponse;
import com.openclassrooms.mddapi.service.SubjectService;
import com.openclassrooms.mddapi.utils.SecurityUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;

/**
 * Contr√¥leur REST Subject - MVP STRICT.
 *
 * **ENDPOINTS MVP UNIQUEMENT :**
 * - GET /api/subjects : Liste des sujets avec statut d'abonnement
 * - GET /api/subjects/{id} : D√©tail d'un sujet avec statut d'abonnement
 * - POST /api/subjects/{id}/subscribe : S'abonner √† un sujet
 * - DELETE /api/subjects/{id}/subscribe : Se d√©sabonner d'un sujet
 *
 * **R√àGLES M√âTIER MVP :**
 * - Visible uniquement pour utilisateurs connect√©s
 * - Affichage avec statut d'abonnement (bouton S'abonner/Se d√©sabonner)
 * - Pagination simple
 *
 * @author √âquipe MDD
 * @version 1.0
 */
@RestController
@RequestMapping("/api/subjects")
@RequiredArgsConstructor
@Slf4j
public class SubjectController {

    private final SubjectService subjectService;

    /**
     * Liste pagin√©e de tous les sujets avec statut d'abonnement.
     *
     * @param page num√©ro de page (0-based, d√©faut: 0)
     * @param size taille de page (d√©faut: 20, max: 100)
     * @return Page de SubjectDTO avec statut d'abonnement
     */
    @GetMapping
    public ResponseEntity<Page<SubjectDTO>> getAllSubjects(
            @RequestParam(defaultValue = "0") @Min(0) int page,
            @RequestParam(defaultValue = "20") @Min(1) @Max(100) int size) {

        String userEmail = SecurityUtils.getCurrentUserEmail();
        log.debug("üìÑ GET /api/subjects - Utilisateur: {}, Page: {}, Size: {}", userEmail, page, size);

        Page<SubjectDTO> subjects = subjectService.getAllSubjects(userEmail, page, size);

        log.info("‚úÖ {} sujets retourn√©s pour {}", subjects.getNumberOfElements(), userEmail);
        return ResponseEntity.ok(subjects);
    }

    /**
     * D√©tail d'un sujet par son ID avec statut d'abonnement.
     *
     * @param id ID du sujet
     * @return SubjectDTO avec statut d'abonnement
     */
    @GetMapping("/{id}")
    public ResponseEntity<SubjectDTO> getSubjectById(@PathVariable Long id) {
        String userEmail = SecurityUtils.getCurrentUserEmail();
        log.debug("üîç GET /api/subjects/{} - Utilisateur: {}", id, userEmail);

        SubjectDTO subject = subjectService.getSubjectById(id, userEmail);

        log.info("‚úÖ Sujet retourn√©: '{}' (ID: {}) pour {}", subject.getName(), id, userEmail);
        return ResponseEntity.ok(subject);
    }

    /**
     * S'abonner √† un sujet.
     *
     * @param id ID du sujet
     * @return Message de confirmation
     */
    @PostMapping("/{id}/subscribe")
    public ResponseEntity<MessageResponse> subscribeToSubject(@PathVariable Long id) {
        String userEmail = SecurityUtils.getCurrentUserEmail();
        log.info("üìå POST /api/subjects/{}/subscribe - Utilisateur: {}", id, userEmail);

        subjectService.subscribeToSubject(id, userEmail);

        log.info("‚úÖ Abonnement r√©ussi: sujet ID {} par {}", id, userEmail);
        return ResponseEntity.ok(MessageResponse.success("Abonnement r√©ussi"));
    }

    /**
     * Se d√©sabonner d'un sujet.
     *
     * @param id ID du sujet
     * @return Message de confirmation
     */
    @DeleteMapping("/{id}/subscribe")
    public ResponseEntity<MessageResponse> unsubscribeFromSubject(@PathVariable Long id) {
        String userEmail = SecurityUtils.getCurrentUserEmail();
        log.info("üìå DELETE /api/subjects/{}/subscribe - Utilisateur: {}", id, userEmail);

        subjectService.unsubscribeFromSubject(id, userEmail);

        log.info("‚úÖ D√©sabonnement r√©ussi: sujet ID {} par {}", id, userEmail);
        return ResponseEntity.ok(MessageResponse.success("D√©sabonnement r√©ussi"));
    }
}
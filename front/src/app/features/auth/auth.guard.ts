import { Injectable } from '@angular/core';
import { CanActivate, Router, UrlTree } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from './auth.service';

/**
 * Guard d'authentification pour prot√©ger les routes priv√©es.
 * 
 * Utilise l'Observable isLoggedIn$ pour une v√©rification r√©active
 * et redirige vers la page de connexion si l'utilisateur n'est pas authentifi√©.
 * 
 * Routes prot√©g√©es : /feed, /topics, /profile, /post/*, /new-post
 */
@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {

  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  /**
   * M√©thode principale du guard pour v√©rifier l'authentification.
   * 
   * @returns Observable<boolean | UrlTree> - true si authentifi√©, 
   *          sinon UrlTree vers /auth/login
   */
  canActivate(): Observable<boolean | UrlTree> {
    return this.authService.isLoggedIn$.pipe(
      take(1), // Prendre seulement la premi√®re valeur pour √©viter les fuites m√©moire
      map(isLoggedIn => {
        if (isLoggedIn) {
          console.log('‚úÖ AuthGuard: Utilisateur authentifi√© - acc√®s autoris√©');
          return true;
        } else {
          console.log('üö´ AuthGuard: Utilisateur non authentifi√© - redirection vers login');
          // ‚úÖ CORRECTION: Redirection vers /auth/login au lieu de /login
          return this.router.createUrlTree(['/auth/login']);
        }
      })
    );
  }
}

/**
 * Guard inverse pour les pages publiques (login, register).
 * 
 * Emp√™che l'acc√®s aux pages d'authentification si l'utilisateur 
 * est d√©j√† connect√© et le redirige vers le feed.
 * 
 * Routes concern√©es : /auth/login, /auth/register
 */
@Injectable({
  providedIn: 'root'
})
export class GuestGuard implements CanActivate {

  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  /**
   * M√©thode principale du guard pour v√©rifier le statut invit√©.
   * 
   * @returns Observable<boolean | UrlTree> - true si non connect√©, 
   *          sinon UrlTree vers /feed
   */
  canActivate(): Observable<boolean | UrlTree> {
    return this.authService.isLoggedIn$.pipe(
      take(1),
      map(isLoggedIn => {
        if (!isLoggedIn) {
          console.log('‚úÖ GuestGuard: Utilisateur non connect√© - acc√®s autoris√© aux pages auth');
          return true;
        } else {
          console.log('üîÑ GuestGuard: Utilisateur d√©j√† connect√© - redirection vers feed');
          return this.router.createUrlTree(['/feed']);
        }
      })
    );
  }
}
